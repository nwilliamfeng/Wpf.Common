<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:data="clr-namespace:Wpf.Common.Controls.Data"
                    >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <PathGeometry x:Key="TreeArrow" Figures="M448 672c-6.4 0-19.2 0-25.6-6.4-12.8-12.8-12.8-32 0-44.8L531.2 512 422.4 409.6c-12.8-12.8-12.8-32 0-44.8s32-12.8 44.8 0l128 128c12.8 12.8 12.8 32 0 44.8l-128 128C467.2 672 454.4 672 448 672z"/>
    
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>
    
    <Style  TargetType="{x:Type ToggleButton}" x:Key="ExpandCollapseToggleStyle">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border  Background="{TemplateBinding Background}" Height="16" Padding="3" Width="16"  >
                        <Path x:Name="ExpandPath" 
                                  Stretch="Uniform"                                 
                                  Data="{StaticResource TreeArrow}" 
                                  Fill="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}"
                                  >
                            <Path.RenderTransform>
                                <RotateTransform Angle="0" CenterY="5" CenterX="4"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=TreeViewItem}}" Value="true">
                            <Setter Property="Fill"  TargetName="ExpandPath" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </DataTrigger>
                       
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="90" CenterY="5" CenterX="4"/>
                                </Setter.Value>
                            </Setter>
                          
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                        
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemStyle"  TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment"  Value="{Binding Path=HorizontalContentAlignment,  RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment"  Value="{Binding Path=VerticalContentAlignment,  RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="2,4"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle"  Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <data:TreeViewItemLeftMarginMultiplierConverter Length="19" x:Key="lengthConverter" />
                    </ControlTemplate.Resources>
                    <StackPanel>
                        <Border Name="Bd"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                            <Grid Margin="{Binding Converter={StaticResource lengthConverter}, RelativeSource={RelativeSource TemplatedParent}}"  >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="Expander"  Style="{StaticResource ExpandCollapseToggleStyle}"  IsChecked="{Binding Path=IsExpanded,  RelativeSource={RelativeSource TemplatedParent}}"  ClickMode="Press"/>
                                <ContentPresenter x:Name="PART_Header"   Grid.Column="1"  ContentSource="Header"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility"  Value="Hidden"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"   Value="false"/>
                                <Condition Property="Width" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"  Property="MinWidth"  Value="75"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"  Value="false"/>
                                <Condition Property="Height"  Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"  Property="MinHeight"  Value="19"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"  Value="true" SourceName="Bd"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"   Property="Background" Value="{StaticResource control-item-mouseover-brush}"/>
                        </MultiTrigger>



                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd"   Property="Background" Value="{StaticResource control-item-select-brush}"/>
                            <Setter Property="Foreground"   Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"   Value="true"/>
                                <Condition Property="IsSelectionActive"   Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"   Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"  Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>